# Snakefile for zbrains: uses derivatives, not raw BIDS

import os
import pandas as pd
import snakebids

configfile: "zbrains/config/snakebids.yml"
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config.get("pybids_inputs", {}),
    )
)

# Load patient + reference demographics
px_demo_df  = pd.read_csv(config["patient_demographics_csv"])
ref_demo_df = pd.read_csv(config["reference_demographics_csv"])

# Derivatives roots
MICAPIPE_DIR   = os.path.join(config["input_path"], "derivatives", f"micapipe_v{config['versions']['micapipe']}")
HIPPUNFOLD_DIR = os.path.join(config["input_path"], "derivatives", f"hippunfold_v{config['versions']['hippunfold']}")
FREESURFER_DIR = (
    os.path.join(config["input_path"], "derivatives", f"freesurfer_v{config['versions']['freesurfer']}")
    if config["versions"]["freesurfer"]
    else os.path.join(config["input_path"], "derivatives", "freesurfer")
)

rule all:
    input:
        expand(
            "{output_dir}/{subject}_{session}_clinical_report.pdf",
            subject=px_demo_df.ID,
            session=px_demo_df.SES,
            output_dir=config["output_dir"],
        )


# -----------------------------------------------------------------------------
# 1) Thickness smoothing (cortex & hippocampus)
# -----------------------------------------------------------------------------

rule smooth_thickness:
    input:
        # pick the right surf geometry based on structure
        surf=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-nativepro_surf-fsLR-{wc.den}_label-midthickness.surf.gii"
            if wc.structure == "cortex"
            else
            f"{HIPPUNFOLD_DIR}/hippunfold/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-T1w_den-"
            f"{config['resolution']['hippocampus']}_label-hipp_midthickness.surf.gii"
        ),
        # and the raw thickness values
        raw_thickness=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-nativepro_surf-fsLR-{wc.den}_label-midthickness_thickness.shape.gii"
            if wc.structure == "cortex"
            else
            f"{HIPPUNFOLD_DIR}/hippunfold/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-T1w_den-"
            f"{config['resolution']['hippocampus']}_label-hipp_thickness.shape.gii"
        ),
    output:
        "{output_dir}/{subject}_{session}_hemi-{hemi}_structure-{structure}"
        "_den-{den}_feature-thickness_smooth-{smoothing}mm.func.gii",
    params:
        smoothing=lambda wc: wc.smoothing,
    shell:
        """
        wb_command -metric-smoothing {input.surf} {input.raw_thickness} {params.smoothing} {output}
        wb_command -set-structure {output} {wildcards.structure.upper()}_{ 'LEFT' if wildcards.hemi == 'L' else 'RIGHT' }
        """

# -----------------------------------------------------------------------------
# 2) Cortex: any feature → metric‑smoothing
# -----------------------------------------------------------------------------

rule cortical_import:
    input:
        surf_file=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-nativepro_surf-fsLR-{wc.resolution}"
            "_label-midthickness.surf.gii"
        ),
        feature_file=lambda wc: (
            # special qT1 filename
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_surf-fsLR-{wc.resolution}"
            "_label-midthickness_T1map.func.gii"
            if wc.feature == "qT1"
            else
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_surf-fsLR-{wc.resolution}"
            f"_label-midthickness_{wc.feature}.func.gii"
        ),
    output:
        "{output_dir}/{subject}_{session}_hemi-{hemi}_structure-cortex"
        "_den-{resolution}_feature-{feature}_smooth-{smoothing}mm.func.gii",
    params:
        smoothing=lambda wc: config["smoothings"]["cortex"],
        resolution=lambda wc: config["resolution"]["cortex"],
    shell:
        """
        wb_command -metric-smoothing {input.surf_file} {input.feature_file} {params.smoothing} {output}
        wb_command -set-structure {output} CORTEX_{ 'LEFT' if wildcards.hemi == 'L' else 'RIGHT' }
        """

# -----------------------------------------------------------------------------
# 3) Hippocampus: volume→surface + smoothing
# -----------------------------------------------------------------------------

rule hippocampal_import:
    input:
        surf_file=lambda wc: (
            f"{HIPPUNFOLD_DIR}/hippunfold/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-T1w_den-"
            f"{config['resolution']['hippocampus']}_label-hipp_midthickness.surf.gii"
        ),
        volumemap=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            f"{wc.subject}_{wc.session}_space-nativepro_map-{wc.feature}.nii.gz"
        ),
    output:
        "{output_dir}/{subject}_{session}_hemi-{hemi}_structure-hippocampus"
        "_den-{resolution}_feature-{feature}_smooth-{smoothing}mm.func.gii",
    params:
        smoothing=lambda wc: config.get("hippocampal_smoothing", 2),
        resolution=lambda wc: config["resolution"]["hippocampus"],
    shell:
        """
        wb_command -volume-to-surface-mapping {input.volumemap} {input.surf_file} tmp.func.gii -trilinear
        wb_command -metric-smoothing {input.surf_file} tmp.func.gii {params.smoothing} {output}
        wb_command -set-structure {output} CORTEX_{ 'LEFT' if wildcards.hemi == 'L' else 'RIGHT' }
        rm -f tmp.func.gii
        """

# -----------------------------------------------------------------------------
# 4) Subcortical → CSV
# -----------------------------------------------------------------------------

rule subcortical_import:
    input:
        seg_file=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/parc/"
            f"{wc.subject}_{wc.session}_space-nativepro_T1w_atlas-subcortical.nii.gz"
        ),
        aseg_stats=lambda wc: (
            f"{FREESURFER_DIR}/{wc.subject}_{wc.session}/stats/aseg.stats"
            if FREESURFER_DIR else None
        ),
        feature_map=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            f"{wc.subject}_{wc.session}_space-nativepro_map-T1map.nii.gz"
            if wc.feature == "qT1"
            else (
                f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
                f"{wc.subject}_{wc.session}_space-nativepro_map-{wc.feature}.nii.gz"
                if wc.feature != "thickness"
                else None
            )
        ),
    output:
        "{output_dir}/{subject}_{session}_desc-subcortical_feature-{feature}_smooth-NAmm.csv",
    params:
        feature=lambda wc: "volume" if wc.feature == "thickness" else wc.feature,
    script:
        "scripts/subcortical_extract.py"

# -----------------------------------------------------------------------------
# 5) Scoring (.func.gii + .csv)
# -----------------------------------------------------------------------------

rule scoring_func_gii:
    input:
        data_file=lambda wc: (
            f"{wc.output_dir}/{wc.subject}_{wc.session}_hemi-{wc.hemi}"
            f"_structure-{wc.structure}_den-{config["resolution"][wc.structure]}"
            f"_feature-{wc.feature}_smooth-{wc.smoothing}mm.func.gii"
        ),
        reference_data=reference_data,
    output:
        "{output_dir}/{subject}_{session}_hemi-{hemi}_structure-{structure}"
        "_den-{den}_feature-{feature}_smooth-{smoothing}mm_score-{method}.func.gii",
    params:
        method=lambda wc: wc.method,
    script:
        "scripts/scoring.py"

rule scoring_csv:
    input:
        data_file=lambda wc: (
            f"{wc.output_dir}/{wc.subject}_{wc.session}_hemi-{wc.hemi}"
            f"_structure-{wc.structure}_den-{config["resolution"][wc.structure]}"
            f"_feature-{wc.feature}_smooth-{wc.smoothing}mm.csv"
        ),
        reference_data=reference_data,
    output:
        "{output_dir}/{subject}_{session}_hemi-{hemi}_structure-{structure}"
        "_den-{den}_feature-{feature}_smooth-{smoothing}mm_score-{method}.csv",
    params:
        method=lambda wc: wc.method,
    script:
        "scripts/scoring.py"

# -----------------------------------------------------------------------------
# 6) Final PDF reports
# -----------------------------------------------------------------------------

rule generate_report:
    input:
        score_files=score_files,
    output:
        "{output_dir}/{subject}_{session}_clinical_report.pdf",
    script:
        "scripts/clinical_reports.py"


# Utility Python functions

def reference_data(wc):
    ext = "csv" if wc.structure == "subcortical" else "func.gii"
    den = config["resolution"][wc.structure]
    return [
        f"{wc.output_dir}/{rid}_{ses}_hemi-{hemi}"
        f"_structure-{wc.structure}_den-{den}_feature-{wc.feature}"
        f"_smooth-{wc.smoothing}mm_score-{method}.{ext}"
        for rid, ses in zip(ref_demo_df.ID, ref_demo_df.SES)
        for hemi in config["hemis"][wc.structure]
        for method in config["scoring_methods"]
    ]
