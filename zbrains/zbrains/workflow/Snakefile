import os
import pandas as pd
import snakebids
from pathlib import Path

# Load config and generate BIDS inputs
configfile: "zbrains/config/snakebids.yml"
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config.get("pybids_inputs", {}),
    )
)

# Read demographics tables
px_demo_df  = pd.read_csv(config["patient_demographics_csv"])
ref_demo_df = pd.read_csv(config["reference_demographics_csv"])
ref_pkl = "refdata-" + Path(config["reference_demographics_csv"]).stem

# Derivatives paths
MICAPIPE_DIR   = os.path.join(config["input_path"], "derivatives", f"micapipe_v{config['versions']['micapipe']}")
HIPPUNFOLD_DIR = os.path.join(config["input_path"], "derivatives", f"hippunfold_v{config['versions']['hippunfold']}")
FREESURFER_DIR = (
    os.path.join(config["input_path"], "derivatives", f"freesurfer_v{config['versions']['freesurfer']}")
    if config["versions"]["freesurfer"]
    else os.path.join(config["input_path"], "derivatives", "freesurfer")
)

# Output root
OUTPUT = config["output_dir"]

# Generate report targets from patient demographics
report_targets = [
    f"{OUTPUT}/{subj}_{sess}_clinical_report.pdf"
    for subj, sess in zip(
        px_demo_df["ID"].tolist(),
        px_demo_df["SES"].tolist()
    )
]

rule all:
    input: report_targets

# 1) Thickness smoothing (cortex & hippocampus)
rule smooth_thickness:
    wildcard_constraints:
        structure="cortex|hippocampus",
    input:
        surf=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-nativepro_surf-fsLR-{wc.den}_label-midthickness.surf.gii"
            if wc.structure == "cortex"
            else
            f"{HIPPUNFOLD_DIR}/hippunfold/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-T1w_den-"
            f"{config['resolution']['hippocampus']}_label-hipp_midthickness.surf.gii"
        ),
        raw_thickness=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_surf-fsLR-{wc.den}_label-thickness.func.gii"
            if wc.structure == "cortex"
            else
            f"{HIPPUNFOLD_DIR}/hippunfold/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-T1w_den-"
            f"{config['resolution']['hippocampus']}_label-hipp_thickness.shape.gii"
        ),
    output:
        temp(f"{OUTPUT}/{{subject}}_{{session}}_hemi-{{hemi}}_structure-{{structure}}"
             f"_den-{{den}}_feature-thickness_smooth-{{smoothing}}mm.func.gii"),
    params:
        smoothing=lambda wc: wc.smoothing,
    shell:
        """
        wb_command -metric-smoothing {input.surf} {input.raw_thickness} {params.smoothing} {output}
        """

# 2) Cortex: any feature → metric‑smoothing
rule cortical_import:
    wildcard_constraints:
        feature="(?!thickness).+",
    input:
        surf_file=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-nativepro_surf-fsLR-{config['resolution']['cortex']}_label-midthickness.surf.gii"
        ),
        feature_file=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_surf-fsLR-{config['resolution']['cortex']}"
            f"_label-midthickness_{wc.feature}.func.gii"
        ),
    output:
        temp(f"{OUTPUT}/{{subject}}_{{session}}_hemi-{{hemi}}_structure-cortex"
             f"_den-{config['resolution']['cortex']}_feature-{{feature}}"
             f"_smooth-{config['smoothings']['cortex']}mm.func.gii"),
    params:
        smoothing=lambda wc: config['smoothings']['cortex'],
    shell:
        """
        wb_command -metric-smoothing {input.surf_file} {input.feature_file} {params.smoothing} {output}
        """

# 3) Hippocampus: volume→surface + smoothing
rule hippocampal_import:
    wildcard_constraints:
        feature="(?!thickness).+",
    input:
        surf_file=lambda wc: (
            f"{HIPPUNFOLD_DIR}/hippunfold/{wc.subject}/{wc.session}/surf/"
            f"{wc.subject}_{wc.session}_hemi-{wc.hemi}_space-T1w_den-"
            f"{config['resolution']['hippocampus']}_label-hipp_midthickness.surf.gii"
        ),
        volumemap=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
            + (
                f"{wc.subject}_{wc.session}_space-nativepro_model-DTI_map-{wc.feature}.nii.gz"
                if wc.feature in {"FA","ADC"}
                else f"{wc.subject}_{wc.session}_space-nativepro_map-{wc.feature}.nii.gz"
            )
        ),
    output:
        temp(f"{OUTPUT}/{{subject}}_{{session}}_hemi-{{hemi}}_structure-hippocampus"
             f"_den-{config['resolution']['hippocampus']}_feature-{{feature}}"
             f"_smooth-{config['smoothings']['hippocampus']}mm.func.gii"),
    params:
        smoothing=lambda wc: config['smoothings']['hippocampus'],
        tmp=lambda wc: f"tmp_{wc.subject}_{wc.session}_{wc.hemi}_{wc.feature}.func.gii",
    shell:
        """
        wb_command -volume-to-surface-mapping {input.volumemap} {input.surf_file} {params.tmp} -trilinear
        wb_command -metric-smoothing {input.surf_file} {params.tmp} {params.smoothing} {output}
        rm -f {params.tmp}
        """

# 4) Subcortical → func.gii
rule subcortical_import:
    wildcard_constraints:
        feature = "(FA|ADC|T1map|volume|thickness)",
    input:
        seg_file=lambda wc: (
            f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/parc/"
            f"{wc.subject}_{wc.session}_space-nativepro_T1w_atlas-subcortical.nii.gz"
        ),
        aseg_stats=lambda wc: (
            f"{FREESURFER_DIR}/{wc.subject}_{wc.session}/stats/aseg.stats"
            if FREESURFER_DIR else None
        ),
    params:
        feature=lambda wc: wc.feature,
        volumemap=lambda wc: (
            None if wc.feature == "thickness" else (
                f"{MICAPIPE_DIR}/{wc.subject}/{wc.session}/maps/"
                + (
                    f"{wc.subject}_{wc.session}_space-nativepro_model-DTI_map-{wc.feature}.nii.gz"
                    if wc.feature in {"FA","ADC"}
                    else f"{wc.subject}_{wc.session}_space-nativepro_map-{wc.feature}.nii.gz"
                )
            )
        ),
    output:
        temp(f"{OUTPUT}/{{subject}}_{{session}}_hemi-{{hemi}}_structure-subcortical"
             f"_den-NA_feature-{{feature}}_smooth-NAmm.func.gii"),
    script:
        "../scripts/subcortical_extract.py"

rule build_ref_mat:
    input:
        giis = lambda wc: [
            f"{OUTPUT}/{rid}_{ses}_hemi-{wc.hemi}_structure-{wc.structure}"
            f"_den-{config['resolution'][wc.structure]}_feature-{wc.feature}"
            f"_smooth-{config['smoothings'][wc.structure]}mm.func.gii"
            for rid, ses in zip(ref_demo_df.ID, ref_demo_df.SES)
        ]
    output:
        mat = f"{OUTPUT}/{ref_pkl}/refmat_structure-{{structure}}_feature-{{feature}}_hemi-{{hemi}}.pkl"
    script:
        "../scripts/build_ref_mat.py"

rule scoring:
    input:
        data_file     = (
            f"{OUTPUT}/{{subject}}_{{session}}_hemi-{{hemi}}"
            f"_structure-{{structure}}_den-{{resolution}}"
            f"_feature-{{feature}}_smooth-{{smoothing}}mm.func.gii"
        ),
        ref_mat       = f"{OUTPUT}/{ref_pkl}/refmat_structure-{{structure}}_feature-{{feature}}_hemi-{{hemi}}.pkl",
        demographics_ref = config["reference_demographics_csv"],
        demographics_pat = config["patient_demographics_csv"],
    output:
        f"{OUTPUT}/scores/{{subject}}_{{session}}_hemi-{{hemi}}_structure-{{structure}}"
        f"_den-{{resolution}}_feature-{{feature}}_smooth-{{smoothing}}mm_score-{{method}}.func.gii",
    params:
        method = lambda wc: wc.method,
        normative_columns = ["AGE", "SEX"],
    script:
        "../scripts/scoring.py"

rule generate_report:
    input:
        score_files=lambda wc: [
            f"{OUTPUT}/scores/{rid}_{ses}_hemi-{hemi}_structure-{structure}"
            f"_den-{config['resolution'][structure]}_feature-{feature}"
            f"_smooth-{config['smoothings'][structure]}mm_score-{method}.func.gii"
            for rid, ses in zip(px_demo_df.ID, px_demo_df.SES)
            for feature in config['features']
            for structure in config['structures']
            for hemi in config['hemis'][structure]
            for method in config['scoring_method']
        ],
        demographics_pat=config['patient_demographics_csv'],
    params:
        report_params=config['report_params'],
        subject=lambda wc: wc.subject,
        session=lambda wc: wc.session,
    output:
        f"{OUTPUT}/{{subject}}_{{session}}_clinical_report.pdf",
    script:
        "../scripts/clinical_reports.py"
